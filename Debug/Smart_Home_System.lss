
Smart_Home_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000594  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000537  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 88 00 	call	0x110	; 0x110 <main>
  64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SW1_Callback>:

#include "app.h"

#define SYSTEM_PSW		1234

void SW1_Callback(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	 * Check for SW1 status,
	 * if pressed -> turn on motor
	 * if not pressed -> turn off motor
	 */

}
  74:	cf 91       	pop	r28
  76:	df 91       	pop	r29
  78:	08 95       	ret

0000007a <SW2_Callback>:

void SW2_Callback(void){
  7a:	df 93       	push	r29
  7c:	cf 93       	push	r28
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Check for SW2 status,
	 * if pressed -> turn on lamp
	 * if not pressed -> turn off lamp
	 */
}
  82:	cf 91       	pop	r28
  84:	df 91       	pop	r29
  86:	08 95       	ret

00000088 <app_init>:

void app_init(void){
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62

	/* LCD Init */

	/* UART Init */

}
  90:	cf 91       	pop	r28
  92:	df 91       	pop	r29
  94:	08 95       	ret

00000096 <Read_Password>:

uint8 Read_Password(void){
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Read password from keypad
	 * If password is correct, return 0
	 * If password is incorrect, return 1
	 */
	return 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
}
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	08 95       	ret

000000a6 <Get_Temperature_Value>:

uint8 Get_Temperature_Value(void){
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	0f 92       	push	r0
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	uint8 ret_val = 50; // Dummy Initialization
  b0:	82 e3       	ldi	r24, 0x32	; 50
  b2:	89 83       	std	Y+1, r24	; 0x01

	return ret_val;
  b4:	89 81       	ldd	r24, Y+1	; 0x01
}
  b6:	0f 90       	pop	r0
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <Get_LDR_Value>:

uint16 Get_LDR_Value(void){
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <Get_LDR_Value+0x6>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	uint16 ret_val = 512; // Dummy Initialization
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	89 83       	std	Y+1, r24	; 0x01

	return ret_val;
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <Set_Lamp_Value>:

void Set_Lamp_Value(enu_LampControl _val){
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	89 83       	std	Y+1, r24	; 0x01

}
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <Set_Motor_Value>:

void Set_Motor_Value(enu_MotorControl _val){
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	0f 92       	push	r0
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	89 83       	std	Y+1, r24	; 0x01

}
  fe:	0f 90       	pop	r0
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <Halt_System>:

void Halt_System(void){
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	ff cf       	rjmp	.-2      	; 0x10e <Halt_System+0x8>

00000110 <main>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "app.h"

int main(void){
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	00 d0       	rcall	.+0      	; 0x116 <main+0x6>
 116:	00 d0       	rcall	.+0      	; 0x118 <main+0x8>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	uint8 login_tries = 0;
 11c:	1c 82       	std	Y+4, r1	; 0x04
	uint8 temp_value;
	uint16 ldr_value;
	app_init();
 11e:	0e 94 44 00 	call	0x88	; 0x88 <app_init>
	while(1){
		if(Read_Password()){
 122:	0e 94 4b 00 	call	0x96	; 0x96 <Read_Password>
 126:	88 23       	and	r24, r24
 128:	49 f0       	breq	.+18     	; 0x13c <main+0x2c>
			login_tries++;
 12a:	8c 81       	ldd	r24, Y+4	; 0x04
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	8c 83       	std	Y+4, r24	; 0x04
			if(MAX_LOGIN_TRIES <= login_tries)
 130:	8c 81       	ldd	r24, Y+4	; 0x04
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	b0 f3       	brcs	.-20     	; 0x122 <main+0x12>
				Halt_System();
 136:	0e 94 83 00 	call	0x106	; 0x106 <Halt_System>
 13a:	f3 cf       	rjmp	.-26     	; 0x122 <main+0x12>
		else
			break;
	}

	while(1){
		temp_value = Get_Temperature_Value();
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <Get_Temperature_Value>
 140:	8b 83       	std	Y+3, r24	; 0x03
		ldr_value = Get_LDR_Value();
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <Get_LDR_Value>
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01
		if(TEMP_THRESHOLD < temp_value)
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	8f 31       	cpi	r24, 0x1F	; 31
 14e:	20 f0       	brcs	.+8      	; 0x158 <main+0x48>
			Set_Motor_Value(Motor_ON);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 79 00 	call	0xf2	; 0xf2 <Set_Motor_Value>
 156:	03 c0       	rjmp	.+6      	; 0x15e <main+0x4e>
		else
			Set_Motor_Value(Motor_OFF);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 79 00 	call	0xf2	; 0xf2 <Set_Motor_Value>
		if(LDR_THRESHOLD < ldr_value)
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	9a 81       	ldd	r25, Y+2	; 0x02
 162:	22 e0       	ldi	r18, 0x02	; 2
 164:	80 30       	cpi	r24, 0x00	; 0
 166:	92 07       	cpc	r25, r18
 168:	20 f0       	brcs	.+8      	; 0x172 <main+0x62>
			Set_Lamp_Value(Lamp_ON);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 6f 00 	call	0xde	; 0xde <Set_Lamp_Value>
 170:	e5 cf       	rjmp	.-54     	; 0x13c <main+0x2c>
		else
			Set_Lamp_Value(Motor_OFF);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 6f 00 	call	0xde	; 0xde <Set_Lamp_Value>
 178:	e1 cf       	rjmp	.-62     	; 0x13c <main+0x2c>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
